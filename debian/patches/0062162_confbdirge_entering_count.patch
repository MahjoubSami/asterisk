diff --git a/apps/app_confbridge.c b/apps/app_confbridge.c
index 55b7b12..ce6ad07 100644
--- a/apps/app_confbridge.c
+++ b/apps/app_confbridge.c
@@ -1234,6 +1234,25 @@ int conf_add_post_join_action(struct confbridge_user *user, int (*func)(struct c
 	return 0;
 }
 
+void conf_handle_pin_request(struct confbridge_conference *conference)
+{
+    char device_name[MAX_CONF_NAME + 12];
+    sprintf(device_name, "confbridge:%s", conference->name);
+
+    if (ast_device_state(device_name) != AST_DEVICE_INUSE) {
+        ast_devstate_changed(AST_DEVICE_RINGING, AST_DEVSTATE_CACHABLE, "confbridge:%s", conference->name);
+    }
+}
+
+void conf_handle_pin_failed(struct confbridge_conference *conference)
+{
+    char device_name[MAX_CONF_NAME + 12];
+    sprintf(device_name, "confbridge:%s", conference->name);
+
+    if (ast_device_state(device_name) == AST_DEVICE_RINGING && conference->enteringusers == 1) {
+        ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "confbridge:%s", conference->name);
+    }
+}
 
 void conf_handle_first_join(struct confbridge_conference *conference)
 {
@@ -1261,6 +1280,48 @@ void conf_ended(struct confbridge_conference *conference)
 	ao2_unlock(conference);
 }
 
+static int conf_get_pin(struct ast_channel *chan, struct confbridge_user *user)
+{
+	char pin_guess[MAX_PIN+1] = { 0, };
+	const char *pin = user->u_profile.pin;
+	char *tmp = pin_guess;
+	int i, res;
+	unsigned int len = MAX_PIN;
+
+	/*
+	 * NOTE: We have not joined a conference yet so we have to use
+	 * the bridge profile requested by the user.
+	 */
+
+	/* give them three tries to get the pin right */
+	for (i = 0; i < 3; i++) {
+		if (ast_app_getdata(chan,
+			conf_get_sound(CONF_SOUND_GET_PIN, user->b_profile.sounds),
+			tmp, len, 0) >= 0) {
+			if (!strcasecmp(pin, pin_guess)) {
+				return 0;
+			}
+		}
+		ast_streamfile(chan,
+			conf_get_sound(CONF_SOUND_INVALID_PIN, user->b_profile.sounds),
+			ast_channel_language(chan));
+		res = ast_waitstream(chan, AST_DIGIT_ANY);
+		if (res > 0) {
+			/* Account for digit already read during ivalid pin playback
+			 * resetting pin buf. */
+			pin_guess[0] = res;
+			pin_guess[1] = '\0';
+			tmp = pin_guess + 1;
+			len = MAX_PIN - 1;
+		} else {
+			/* reset pin buf as empty buffer. */
+			tmp = pin_guess;
+			len = MAX_PIN;
+		}
+	}
+	return -1;
+}
+
 /*!
  * \brief Join a conference bridge
  *
@@ -1384,6 +1445,22 @@ static struct confbridge_conference *join_conference_bridge(const char *conferen
 	 */
 	user->suspended_moh = 1;
 
+    /* ask for a PIN immediately after finding user profile.  This has to be
+     * prompted for requardless of quiet setting. */
+    if (!ast_strlen_zero(user->u_profile.pin)) {
+        conf_add_user_entering(conference, user);
+        conf_handle_pin_request(conference);
+	    ao2_unlock(conference);
+        if (conf_get_pin(user->chan, user)) {
+            pbx_builtin_setvar_helper(user->chan, "CONFBRIDGE_RESULT", "FAILED");
+            conf_handle_pin_failed(conference);
+            conf_remove_user_entering(conference, user);
+            return NULL;
+        }
+	    ao2_lock(conference);
+        conf_remove_user_entering(conference, user);
+    }
+
 	if (handle_conf_user_join(user)) {
 		/* Invalid event, nothing was done, so we don't want to process a leave. */
 		ao2_unlock(conference);
@@ -1574,47 +1651,6 @@ static int conf_handle_talker_cb(struct ast_bridge_channel *bridge_channel, void
 	return 0;
 }
 
-static int conf_get_pin(struct ast_channel *chan, struct confbridge_user *user)
-{
-	char pin_guess[MAX_PIN+1] = { 0, };
-	const char *pin = user->u_profile.pin;
-	char *tmp = pin_guess;
-	int i, res;
-	unsigned int len = MAX_PIN;
-
-	/*
-	 * NOTE: We have not joined a conference yet so we have to use
-	 * the bridge profile requested by the user.
-	 */
-
-	/* give them three tries to get the pin right */
-	for (i = 0; i < 3; i++) {
-		if (ast_app_getdata(chan,
-			conf_get_sound(CONF_SOUND_GET_PIN, user->b_profile.sounds),
-			tmp, len, 0) >= 0) {
-			if (!strcasecmp(pin, pin_guess)) {
-				return 0;
-			}
-		}
-		ast_streamfile(chan,
-			conf_get_sound(CONF_SOUND_INVALID_PIN, user->b_profile.sounds),
-			ast_channel_language(chan));
-		res = ast_waitstream(chan, AST_DIGIT_ANY);
-		if (res > 0) {
-			/* Account for digit already read during ivalid pin playback
-			 * resetting pin buf. */
-			pin_guess[0] = res;
-			pin_guess[1] = '\0';
-			tmp = pin_guess + 1;
-			len = MAX_PIN - 1;
-		} else {
-			/* reset pin buf as empty buffer. */
-			tmp = pin_guess;
-			len = MAX_PIN;
-		}
-	}
-	return -1;
-}
 
 static int user_timeout(struct ast_bridge_channel *bridge_channel, void *ignore)
 {
@@ -1745,15 +1781,6 @@ static int confbridge_exec(struct ast_channel *chan, const char *data)
 
 	quiet = ast_test_flag(&user.u_profile, USER_OPT_QUIET);
 
-	/* ask for a PIN immediately after finding user profile.  This has to be
-	 * prompted for requardless of quiet setting. */
-	if (!ast_strlen_zero(user.u_profile.pin)) {
-		if (conf_get_pin(chan, &user)) {
-			pbx_builtin_setvar_helper(chan, "CONFBRIDGE_RESULT", "FAILED");
-			res = -1; /* invalid PIN */
-			goto confbridge_cleanup;
-		}
-	}
 
 	/* See if we need them to record a intro name */
 	if (!quiet &&
@@ -3261,6 +3288,16 @@ static int func_confbridge_info(struct ast_channel *chan, const char *cmd, char
 		AST_LIST_TRAVERSE(&conference->waiting_list, user, list) {
 			count++;
 		}
+	} else if (!strcasecmp(args.type, "members")) {
+		AST_LIST_TRAVERSE(&conference->active_list, user, list) {
+			count++;
+		}
+		AST_LIST_TRAVERSE(&conference->waiting_list, user, list) {
+			count++;
+		}
+		AST_LIST_TRAVERSE(&conference->entering_list, user, list) {
+			count++;
+		}
 	} else if (!strcasecmp(args.type, "admins")) {
 		AST_LIST_TRAVERSE(&conference->active_list, user, list) {
 			if (ast_test_flag(&user->u_profile, USER_OPT_ADMIN)) {
@@ -3286,6 +3323,12 @@ static int func_confbridge_info(struct ast_channel *chan, const char *cmd, char
 	return 0;
 }
 
+void conf_add_user_entering(struct confbridge_conference *conference, struct confbridge_user *user)
+{
+	AST_LIST_INSERT_TAIL(&conference->entering_list, user, list);
+	conference->enteringusers++;
+}
+
 void conf_add_user_active(struct confbridge_conference *conference, struct confbridge_user *user)
 {
 	AST_LIST_INSERT_TAIL(&conference->active_list, user, list);
@@ -3305,6 +3348,12 @@ void conf_add_user_waiting(struct confbridge_conference *conference, struct conf
 	conference->waitingusers++;
 }
 
+void conf_remove_user_entering(struct confbridge_conference *conference, struct confbridge_user *user)
+{
+	AST_LIST_REMOVE(&conference->entering_list, user, list);
+	conference->enteringusers--;
+}
+
 void conf_remove_user_active(struct confbridge_conference *conference, struct confbridge_user *user)
 {
 	AST_LIST_REMOVE(&conference->active_list, user, list);
diff --git a/apps/confbridge/include/confbridge.h b/apps/confbridge/include/confbridge.h
index 8d2dffb..0370c4d 100644
--- a/apps/confbridge/include/confbridge.h
+++ b/apps/confbridge/include/confbridge.h
@@ -218,6 +218,7 @@ struct confbridge_conference {
 	unsigned int activeusers;                                         /*!< Number of active users present */
 	unsigned int markedusers;                                         /*!< Number of marked users present */
 	unsigned int waitingusers;                                        /*!< Number of waiting users present */
+	unsigned int enteringusers;                                       /*!< Number of entering pin users present */
 	unsigned int locked:1;                                            /*!< Is this conference bridge locked? */
 	unsigned int muted:1;                                             /*!< Is this conference bridge muted? */
 	struct ast_channel *playback_chan;                                /*!< Channel used for playback into the conference bridge */
@@ -227,6 +228,7 @@ struct confbridge_conference {
 	ast_mutex_t playback_lock;                                        /*!< Lock used for playback channel */
 	AST_LIST_HEAD_NOLOCK(, confbridge_user) active_list;              /*!< List of users participating in the conference bridge */
 	AST_LIST_HEAD_NOLOCK(, confbridge_user) waiting_list;             /*!< List of users waiting to join the conference bridge */
+	AST_LIST_HEAD_NOLOCK(, confbridge_user) entering_list;            /*!< List of users entering pin to join the conference bridge */
 };
 
 extern struct ao2_container *conference_bridges;
@@ -422,6 +424,16 @@ void conf_moh_start(struct confbridge_user *user);
  */
 void conf_mute_only_active(struct confbridge_conference *conference);
 
+/*! \brief Callback to execute any time we request a pin to a entering pin user
+ * \param conference The conference bridge
+ */
+void conf_handle_pin_request(struct confbridge_conference *conference);
+
+/*! \brief Callback to execute any time the user leaves the confence during pin request
+ * \param conference The conference bridge
+ */
+void conf_handle_pin_failed(struct confbridge_conference *conference);
+
 /*! \brief Callback to execute any time we transition from zero to one active users
  * \param conference The conference bridge with a single active user joined
  * \retval 0 success
@@ -449,6 +461,12 @@ int conf_handle_only_unmarked(struct confbridge_user *user);
  */
 void conf_handle_second_active(struct confbridge_conference *conference);
 
+/*! \brief Add a conference bridge user as an entering pin user of the conference
+ * \param conference The conference bridge to add the user to
+ * \param user The conference bridge user to add to the conference
+ */
+void conf_add_user_entering(struct confbridge_conference *conference, struct confbridge_user *user);
+
 /*! \brief Add a conference bridge user as an unmarked active user of the conference
  * \param conference The conference bridge to add the user to
  * \param user The conference bridge user to add to the conference
@@ -467,6 +485,12 @@ void conf_add_user_marked(struct confbridge_conference *conference, struct confb
  */
 void conf_add_user_waiting(struct confbridge_conference *conference, struct confbridge_user *user);
 
+/*! \brief Remove a conference bridge user from the entering pin conference users in the conference
+ * \param conference The conference bridge to remove the user from
+ * \param user The conference bridge user to remove from the conference
+ */
+void conf_remove_user_entering(struct confbridge_conference *conference, struct confbridge_user *user);
+
 /*! \brief Remove a conference bridge user from the unmarked active conference users in the conference
  * \param conference The conference bridge to remove the user from
  * \param user The conference bridge user to remove from the conference
